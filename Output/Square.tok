KW_CLASS, class
IDENT, Square
SY_LBRACE, {
KW_VARDEC, field
KW_TYPE, int
IDENT, x
SY_COMMA, ,
IDENT, y
SY_SEMI, ;
KW_VARDEC, field
KW_TYPE, int
IDENT, size
SY_SEMI, ;
KW_SUBDEC, constructor
IDENT, Square
IDENT, new
SY_LPAREN, (
KW_TYPE, int
IDENT, Ax
SY_COMMA, ,
KW_TYPE, int
IDENT, Ay
SY_COMMA, ,
KW_TYPE, int
IDENT, Asize
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, x
SY_EQ, =
IDENT, Ax
SY_SEMI, ;
KW_LET, let
IDENT, y
SY_EQ, =
IDENT, Ay
SY_SEMI, ;
KW_LET, let
IDENT, size
SY_EQ, =
IDENT, Asize
SY_SEMI, ;
KW_DO, do
IDENT, draw
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_RETURN, return
IDENT, x
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, dispose
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, Memory
SY_PERIOD, .
IDENT, deAlloc
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, draw
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, setColor
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
IDENT, x
SY_COMMA, ,
IDENT, y
SY_COMMA, ,
IDENT, x
SY_COMMA, ,
IDENT, y
SY_RPAREN, )
SY_SEMI, ;
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, erase
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, setColor
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
IDENT, x
SY_COMMA, ,
IDENT, y
SY_COMMA, ,
IDENT, x
SY_COMMA, ,
IDENT, y
SY_RPAREN, )
SY_SEMI, ;
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, incSize
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, erase
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, size
SY_EQ, =
IDENT, size
SY_SEMI, ;
KW_DO, do
IDENT, draw
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, decSize
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, size
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, erase
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, size
SY_EQ, =
IDENT, size
SY_SEMI, ;
KW_DO, do
IDENT, draw
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, moveUp
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, y
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, setColor
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
IDENT, x
SY_COMMA, ,
IDENT, y
SY_COMMA, ,
IDENT, x
SY_COMMA, ,
IDENT, y
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, y
SY_EQ, =
IDENT, y
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, setColor
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
IDENT, x
SY_COMMA, ,
IDENT, y
SY_COMMA, ,
IDENT, x
SY_COMMA, ,
IDENT, y
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, moveDown
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, y
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, setColor
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
IDENT, x
SY_COMMA, ,
IDENT, y
SY_COMMA, ,
IDENT, x
SY_COMMA, ,
IDENT, y
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, y
SY_EQ, =
IDENT, y
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, setColor
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
IDENT, x
SY_COMMA, ,
IDENT, y
SY_COMMA, ,
IDENT, x
SY_COMMA, ,
IDENT, y
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, moveLeft
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, setColor
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
IDENT, x
SY_COMMA, ,
IDENT, y
SY_COMMA, ,
IDENT, x
SY_COMMA, ,
IDENT, y
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, x
SY_EQ, =
IDENT, x
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, setColor
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
IDENT, x
SY_COMMA, ,
IDENT, y
SY_COMMA, ,
IDENT, x
SY_COMMA, ,
IDENT, y
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, moveRight
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, setColor
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
IDENT, x
SY_COMMA, ,
IDENT, y
SY_COMMA, ,
IDENT, x
SY_COMMA, ,
IDENT, y
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, x
SY_EQ, =
IDENT, x
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, setColor
SY_LPAREN, (
IDENT, x
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
IDENT, x
SY_COMMA, ,
IDENT, y
SY_COMMA, ,
IDENT, x
SY_COMMA, ,
IDENT, y
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
SY_RBRACE, }
