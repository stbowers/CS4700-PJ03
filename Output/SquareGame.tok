KW_CLASS, class
IDENT, SquareGame
SY_LBRACE, {
KW_VARDEC, field
IDENT, Square
IDENT, square
SY_SEMI, ;
KW_VARDEC, field
KW_TYPE, int
IDENT, direction
SY_SEMI, ;
KW_SUBDEC, constructor
IDENT, SquareGame
IDENT, new
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, square
SY_EQ, =
IDENT, square
SY_SEMI, ;
KW_LET, let
IDENT, direction
SY_EQ, =
IDENT, direction
SY_SEMI, ;
KW_RETURN, return
IDENT, square
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, dispose
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, square
SY_PERIOD, .
IDENT, dispose
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Memory
SY_PERIOD, .
IDENT, deAlloc
SY_LPAREN, (
IDENT, square
SY_RPAREN, )
SY_SEMI, ;
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, run
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_VAR, var
KW_TYPE, char
IDENT, key
SY_SEMI, ;
KW_VAR, var
KW_TYPE, boolean
IDENT, exit
SY_SEMI, ;
KW_LET, let
IDENT, exit
SY_EQ, =
IDENT, key
SY_SEMI, ;
KW_WHILE, while
SY_LPAREN, (
IDENT, exit
SY_RPAREN, )
SY_LBRACE, {
KW_WHILE, while
SY_LPAREN, (
IDENT, key
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, key
SY_EQ, =
IDENT, key
SY_SEMI, ;
KW_DO, do
IDENT, moveSquare
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, key
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, exit
SY_EQ, =
IDENT, exit
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, key
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, square
SY_PERIOD, .
IDENT, decSize
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, key
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, square
SY_PERIOD, .
IDENT, incSize
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, key
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, direction
SY_EQ, =
IDENT, exit
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, key
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, direction
SY_EQ, =
IDENT, key
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, key
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, direction
SY_EQ, =
IDENT, square
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, key
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, direction
SY_EQ, =
IDENT, direction
SY_SEMI, ;
SY_RBRACE, }
KW_WHILE, while
SY_LPAREN, (
IDENT, key
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, key
SY_EQ, =
IDENT, key
SY_SEMI, ;
KW_DO, do
IDENT, moveSquare
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
SY_RBRACE, }
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, moveSquare
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, direction
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, square
SY_PERIOD, .
IDENT, moveUp
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, direction
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, square
SY_PERIOD, .
IDENT, moveDown
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, direction
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, square
SY_PERIOD, .
IDENT, moveLeft
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, direction
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, square
SY_PERIOD, .
IDENT, moveRight
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_DO, do
IDENT, Sys
SY_PERIOD, .
IDENT, wait
SY_LPAREN, (
IDENT, direction
SY_RPAREN, )
SY_SEMI, ;
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
SY_RBRACE, }
