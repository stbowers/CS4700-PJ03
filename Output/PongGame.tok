KW_CLASS, class
IDENT, PongGame
SY_LBRACE, {
KW_VARDEC, static
IDENT, PongGame
IDENT, instance
SY_SEMI, ;
KW_VARDEC, field
IDENT, Bat
IDENT, bat
SY_SEMI, ;
KW_VARDEC, field
IDENT, Ball
IDENT, ball
SY_SEMI, ;
KW_VARDEC, field
KW_TYPE, int
IDENT, wall
SY_SEMI, ;
KW_VARDEC, field
KW_TYPE, boolean
IDENT, exit
SY_SEMI, ;
KW_VARDEC, field
KW_TYPE, int
IDENT, score
SY_SEMI, ;
KW_VARDEC, field
KW_TYPE, int
IDENT, lastWall
SY_SEMI, ;
KW_VARDEC, field
KW_TYPE, int
IDENT, batWidth
SY_SEMI, ;
KW_SUBDEC, constructor
IDENT, PongGame
IDENT, new
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, clearScreen
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, batWidth
SY_EQ, =
INTEGER, 50
SY_SEMI, ;
KW_LET, let
IDENT, bat
SY_EQ, =
IDENT, Bat
SY_PERIOD, .
IDENT, new
SY_LPAREN, (
INTEGER, 230
SY_COMMA, ,
INTEGER, 229
SY_COMMA, ,
IDENT, batWidth
SY_COMMA, ,
INTEGER, 7
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, ball
SY_EQ, =
IDENT, Ball
SY_PERIOD, .
IDENT, new
SY_LPAREN, (
INTEGER, 253
SY_COMMA, ,
INTEGER, 222
SY_COMMA, ,
INTEGER, 0
SY_COMMA, ,
INTEGER, 511
SY_COMMA, ,
INTEGER, 0
SY_COMMA, ,
INTEGER, 229
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, ball
SY_PERIOD, .
IDENT, setDestination
SY_LPAREN, (
INTEGER, 400
SY_COMMA, ,
INTEGER, 0
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Screen
SY_PERIOD, .
IDENT, drawRectangle
SY_LPAREN, (
INTEGER, 0
SY_COMMA, ,
INTEGER, 238
SY_COMMA, ,
INTEGER, 511
SY_COMMA, ,
INTEGER, 240
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Output
SY_PERIOD, .
IDENT, moveCursor
SY_LPAREN, (
INTEGER, 22
SY_COMMA, ,
INTEGER, 0
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Output
SY_PERIOD, .
IDENT, printString
SY_LPAREN, (
STRING, "Score: 0"
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, exit
SY_EQ, =
KW_CONST, false
SY_SEMI, ;
KW_LET, let
IDENT, score
SY_EQ, =
INTEGER, 0
SY_SEMI, ;
KW_LET, let
IDENT, wall
SY_EQ, =
INTEGER, 0
SY_SEMI, ;
KW_LET, let
IDENT, lastWall
SY_EQ, =
INTEGER, 0
SY_SEMI, ;
KW_RETURN, return
KW_CONST, this
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, dispose
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, bat
SY_PERIOD, .
IDENT, dispose
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, ball
SY_PERIOD, .
IDENT, dispose
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Memory
SY_PERIOD, .
IDENT, deAlloc
SY_LPAREN, (
KW_CONST, this
SY_RPAREN, )
SY_SEMI, ;
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, function
KW_VOID, void
IDENT, newInstance
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, instance
SY_EQ, =
IDENT, PongGame
SY_PERIOD, .
IDENT, new
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, function
IDENT, PongGame
IDENT, getInstance
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_RETURN, return
IDENT, instance
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, run
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_VAR, var
KW_TYPE, char
IDENT, key
SY_SEMI, ;
KW_WHILE, while
SY_LPAREN, (
SY_NOT, ~
IDENT, exit
SY_RPAREN, )
SY_LBRACE, {
KW_WHILE, while
SY_LPAREN, (
SY_LPAREN, (
IDENT, key
SY_EQ, =
INTEGER, 0
SY_RPAREN, )
SY_OP, &
SY_LPAREN, (
SY_NOT, ~
IDENT, exit
SY_RPAREN, )
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, key
SY_EQ, =
IDENT, Keyboard
SY_PERIOD, .
IDENT, keyPressed
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, bat
SY_PERIOD, .
IDENT, move
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, moveBall
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, key
SY_EQ, =
INTEGER, 130
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, bat
SY_PERIOD, .
IDENT, setDirection
SY_LPAREN, (
INTEGER, 1
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_ELSE, else
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, key
SY_EQ, =
INTEGER, 132
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, bat
SY_PERIOD, .
IDENT, setDirection
SY_LPAREN, (
INTEGER, 2
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_ELSE, else
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, key
SY_EQ, =
INTEGER, 140
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, exit
SY_EQ, =
KW_CONST, true
SY_SEMI, ;
SY_RBRACE, }
SY_RBRACE, }
SY_RBRACE, }
KW_WHILE, while
SY_LPAREN, (
SY_LPAREN, (
SY_NOT, ~
SY_LPAREN, (
IDENT, key
SY_EQ, =
INTEGER, 0
SY_RPAREN, )
SY_RPAREN, )
SY_OP, &
SY_LPAREN, (
SY_NOT, ~
IDENT, exit
SY_RPAREN, )
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, key
SY_EQ, =
IDENT, Keyboard
SY_PERIOD, .
IDENT, keyPressed
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, bat
SY_PERIOD, .
IDENT, move
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, moveBall
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
SY_RBRACE, }
KW_IF, if
SY_LPAREN, (
IDENT, exit
SY_RPAREN, )
SY_LBRACE, {
KW_DO, do
IDENT, Output
SY_PERIOD, .
IDENT, moveCursor
SY_LPAREN, (
INTEGER, 10
SY_COMMA, ,
INTEGER, 27
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Output
SY_PERIOD, .
IDENT, printString
SY_LPAREN, (
STRING, "Game Over"
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
KW_SUBDEC, method
KW_VOID, void
IDENT, moveBall
SY_LPAREN, (
SY_RPAREN, )
SY_LBRACE, {
KW_VAR, var
KW_TYPE, int
IDENT, bouncingDirection
SY_COMMA, ,
IDENT, batLeft
SY_COMMA, ,
IDENT, batRight
SY_COMMA, ,
IDENT, ballLeft
SY_COMMA, ,
IDENT, ballRight
SY_SEMI, ;
KW_LET, let
IDENT, wall
SY_EQ, =
IDENT, ball
SY_PERIOD, .
IDENT, move
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_IF, if
SY_LPAREN, (
SY_LPAREN, (
IDENT, wall
SY_OP, >
INTEGER, 0
SY_RPAREN, )
SY_OP, &
SY_LPAREN, (
SY_NOT, ~
SY_LPAREN, (
IDENT, wall
SY_EQ, =
IDENT, lastWall
SY_RPAREN, )
SY_RPAREN, )
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, lastWall
SY_EQ, =
IDENT, wall
SY_SEMI, ;
KW_LET, let
IDENT, bouncingDirection
SY_EQ, =
INTEGER, 0
SY_SEMI, ;
KW_LET, let
IDENT, batLeft
SY_EQ, =
IDENT, bat
SY_PERIOD, .
IDENT, getLeft
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, batRight
SY_EQ, =
IDENT, bat
SY_PERIOD, .
IDENT, getRight
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, ballLeft
SY_EQ, =
IDENT, ball
SY_PERIOD, .
IDENT, getLeft
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, ballRight
SY_EQ, =
IDENT, ball
SY_PERIOD, .
IDENT, getRight
SY_LPAREN, (
SY_RPAREN, )
SY_SEMI, ;
KW_IF, if
SY_LPAREN, (
IDENT, wall
SY_EQ, =
INTEGER, 4
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, exit
SY_EQ, =
SY_LPAREN, (
IDENT, batLeft
SY_OP, >
IDENT, ballRight
SY_RPAREN, )
SY_OP, |
SY_LPAREN, (
IDENT, batRight
SY_OP, <
IDENT, ballLeft
SY_RPAREN, )
SY_SEMI, ;
KW_IF, if
SY_LPAREN, (
SY_NOT, ~
IDENT, exit
SY_RPAREN, )
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, ballRight
SY_OP, <
SY_LPAREN, (
IDENT, batLeft
SY_OP, +
INTEGER, 10
SY_RPAREN, )
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, bouncingDirection
SY_EQ, =
SY_MINUS, -
INTEGER, 1
SY_SEMI, ;
SY_RBRACE, }
KW_ELSE, else
SY_LBRACE, {
KW_IF, if
SY_LPAREN, (
IDENT, ballLeft
SY_OP, >
SY_LPAREN, (
IDENT, batRight
SY_MINUS, -
INTEGER, 10
SY_RPAREN, )
SY_RPAREN, )
SY_LBRACE, {
KW_LET, let
IDENT, bouncingDirection
SY_EQ, =
INTEGER, 1
SY_SEMI, ;
SY_RBRACE, }
SY_RBRACE, }
KW_LET, let
IDENT, batWidth
SY_EQ, =
IDENT, batWidth
SY_MINUS, -
INTEGER, 2
SY_SEMI, ;
KW_DO, do
IDENT, bat
SY_PERIOD, .
IDENT, setWidth
SY_LPAREN, (
IDENT, batWidth
SY_RPAREN, )
SY_SEMI, ;
KW_LET, let
IDENT, score
SY_EQ, =
IDENT, score
SY_OP, +
INTEGER, 1
SY_SEMI, ;
KW_DO, do
IDENT, Output
SY_PERIOD, .
IDENT, moveCursor
SY_LPAREN, (
INTEGER, 22
SY_COMMA, ,
INTEGER, 7
SY_RPAREN, )
SY_SEMI, ;
KW_DO, do
IDENT, Output
SY_PERIOD, .
IDENT, printInt
SY_LPAREN, (
IDENT, score
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
SY_RBRACE, }
KW_DO, do
IDENT, ball
SY_PERIOD, .
IDENT, bounce
SY_LPAREN, (
IDENT, bouncingDirection
SY_RPAREN, )
SY_SEMI, ;
SY_RBRACE, }
KW_RETURN, return
SY_SEMI, ;
SY_RBRACE, }
SY_RBRACE, }
